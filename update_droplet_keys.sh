#!/bin/bash

# UNCOMMENT THIS TO SET YOUR TOKEN IN THE SCRIPT - NOT RECOMMENDED
#TOKEN="YOURTOKEN"

# Check if the Token is set
if [[ "$TOKEN" == "" ]]; then
   echo "You must set your api token using the following in bash"
   echo "export TOKEN=\"YOURTOKEN\""
   echo
   echo "We will not proceed without the token set!"
   exit 253
fi

# DONT TOUCH THESE VARIABLES - HERE LIE DRAGONS
CURL="curl -s --fail -X GET"
CONTENT_TYPE="Content-Type: application/json"
HEADERS="Authorization: Bearer $TOKEN"
JSON="./JSON.sh/JSON.sh -p -b"
URL="https://api.digitalocean.com/v2"
TEMP_FILE=`mktemp -t "$0"`
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
MY_SSH_KEY=`cat $HOME/.ssh/id_rsa.pub`
MY_HOSTNAME=`hostname -f`

# Check if our dependencies are installed
command -v curl >/dev/null 2>&1 || { echo >&2 "This script requires curl but it's not installed.  Aborting."; exit 1; }
command -v egrep >/dev/null 2>&1 || { echo >&2 "This script requires egrep but it's not installed.  Aborting."; exit 1; }
command -v mktemp >/dev/null 2>&1 || { echo >&2 "This script requires mktemp but it's not installed.  Aborting."; exit 1; }
[[ -f "$DIR/JSON.sh/JSON.sh" ]] || { echo >&2 "This script requires JSON.sh as a submodule but it's not available, try recloning the repository.  Aborting."; exit 1; }
[[ -f "$HOME/.ssh/id_rsa.pub" ]] || { echo >&2 "Looks like you don't have a local SSH key stored in $HOME/.ssh/id_rsa.pub this is a problem! Generate one first.  Aborting."; exit 1; }

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
   echo "** User Cancelled **"
   exit 254
}

# Check ACCESS Token
printf "Checking your access Token ... "
BLAH=`$CURL -H "$CONTENT_TYPE" -H "$HEADERS" "$URL/account/keys"`
if [[ $? != 0 ]]; then
   printf "Failed!\n"
   echo "There was an error with your token"
   echo
   echo "We will not proceed!"
   exit 253
else
   printf "Success!\n"
fi

# List all SSH Keys
printf "Getting all SSH Keys from DigitalOcean ... "
SSH_KEYS=`$CURL -H "$CONTENT_TYPE" -H "$HEADERS" "$URL/account/keys" | $JSON`
printf "Success!\n"

# List all droplets
printf "Getting all Droplet IPs from DigitalOcean ... "
RAW_IPs=`$CURL -H "$CONTENT_TYPE" -H "$HEADERS" "$URL/droplets" | $JSON | egrep '^\["droplets",+([0-9]),"networks","v4",+([0-9])' | cut -f2 -d$'\t' | tr -d "\""`
printf "Success!\n"

RAW_KEYS=`echo "$SSH_KEYS" | egrep '\["ssh_keys",[0-9],"public_key"\]' | cut -f2 -d$'\t'`
RAW_NAMES=`echo "$SSH_KEYS" | egrep '\["ssh_keys",[0-9],"name"\]' | cut -f2 -d$'\t'`

KEYS=()
NAMES=()
IPs=()
COUNTER=0

OLD_IFS="$IFS"
IFS=$'\n'
for key in $RAW_KEYS; do
   KEYS+=($key)
done

for name in $RAW_NAMES; do
   NAMES+=($name)
done

for ip in $RAW_IPs; do
   IPs+=($ip)
done

now="$(date +'%d/%m/%Y')"
printf "######\n# Authorized Keys file generated by %s on %s\n######\n\n" "$USER" "$now" > "$TEMP_FILE"

THISKEY="NO"

for name in ${NAMES[@]}; do
   echo "# Public Key for $name" >> "$TEMP_FILE"
   echo "${KEYS[${COUNTER}]}" | tr -d "\"" >> "$TEMP_FILE"
   if [[ "${KEYS[${COUNTER}]}" | tr -d "\"" == *"$MY_SSH_KEY"* ]]; then
      THISKEY="YES"
   fi
   COUNTER=$[$COUNTER + 1]
done
IFS="$OLD_IFS"

if [[ "$THISKEY" == "NO" ]]; then
   echo "Looks like you don't have your own SSH key stored in the DigitalOcean website, I will add it for you to the servers anyway"
   echo "# Public Key for $MY_HOSTNAME" >> "$TEMP_FILE"
   echo "$MY_SSH_KEY" >> "$TEMP_FILE"
fi

COUNTER=0
SSH_IPs=()

for value in ${IPs[@]}; do
   if [[ $value == *"public"* ]]; then
      SSH_IPs+=("${IPs[$(( $COUNTER - 3 ))]}")
   fi
   COUNTER=$(($COUNTER + 1))
done

# Do some sanity checking
if [[ ${#SSH_IPs[@]} == 0 ]]; then
   echo "We couldn't find any hosts to update! Check that you have a droplet"
   exit 255
fi

if [[ ${#SSH_IPs[@]} == 0 ]]; then
   echo "We couldn't find any ssh keys to update! Check that you have some keys"
   exit 255
fi

# Ask the user if they are sure
echo "** WARNING THIS IS POTENTIALLY DESTRUCTIVE - THIK CAREFULLY **"
read -p "Would you like to update ${#SSH_IPs[@]} hosts with ${#NAMES[@]} ssh keys y/n? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]; then
   succes_count=0
   for ip in ${SSH_IPs[@]}; do
      printf "SSH to $ip to update authorized_keys file ... "
      scp -q "$TEMP_FILE" root@$ip:/root/.ssh/authorized_keys
      if [[ $? == 0 ]]; then
         printf "Success!\n"
         succes_count=$(( $succes_count + 1 ))
      else
         printf "Failed!\n"
         echo "Do you have the correct SSH access on this machine?"
      fi
   done
   echo "Finished updating $succes_count hosts"
   rm "$TEMP_FILE"
   exit 0
else
   exit 254
fi
